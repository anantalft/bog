# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    CC_TEST_REPORTER_ID: 2006b2bd0498da9276aa34c6084b628a7bad8693c6650835f23663cc14db3d99
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.4.1-node-browsers
      - image: circleci/postgres:9.6.2-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: bog-test_test

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/bog

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run: bundle exec rake db:drop
      - run: bundle exec rake db:create
      - run: bundle exec rake db:migrate

      # run tests!
      - run:
          name: run rspec
          command: bundle exec rspec

      - run:
          name: Setup dependencies
          command: |
            sudo composer self-update
            composer install -n --prefer-dist
      - run:
          name: Setup Code Climate test-reporter
          command: |
          # download test reporter as a static binary
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Run tests
          command: |
            sudo docker-php-ext-enable xdebug
          # notify Code Climate of a pending test report using `before-build`
            ./cc-test-reporter before-build
            sudo vendor/bin/phpunit --coverage-clover clover.xml
          # upload test report to Code Climate using `after-build`
            ./cc-test-reporter after-build --coverage-input-type clover --exit-code $?

      # collect reports
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage
